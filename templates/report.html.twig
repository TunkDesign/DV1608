{% extends 'base.html.twig' %}

{% block title %}Redovisningar{% endblock %}

{% block body %}
<section class="report-page">
  <div class="container">
    <h1>Redovisning</h1>
    <p>Här samlar jag mina reflektioner och redovisningstexter för varje kursmoment i MVC-kursen.</p>

    <nav class="report-nav">
      <a href="#kmom01">Kmom01</a>
      <a href="#kmom02">Kmom02</a>
      <a href="#kmom03">Kmom03</a>
      <a href="#kmom04">Kmom04</a>
      <a href="#kmom05">Kmom05</a>
      <a href="#kmom06">Kmom06</a>
    </nav>

    <article id="kmom01" class="report-section">
      <h2>Kmom01</h2>
      <h3>Förkunskaper</h3>
      <p>Jag har tidigare jobbat med objektorientering i både PHP och Python, mest i egna projekt. Senast använde jag OOP i OOPython-kursen. Jag tycker det är ett bra sätt att strukturera kod på, speciellt när projekten börjar bli större.</p>

      <h3>PHPs modell</h3>
      <p>PHP gör det ganska lätt att komma igång med klasser och objekt. Man skapar en klass med class, och använder new för att skapa objekt. Några grunder man kan behöva förstå är:</p>
      <ul>
        <li>Hur man skapar en klass med egenskaper (variabler) och metoder (funktioner).</li>
        <li>Hur konstruktorn <code>__construct()</code> fungerar.</li>
        <li>Skillnaden mellan public, private och protected.</li>
        <li>Hur man använder arv (en klass som ärver från en annan med extends).</li>
      </ul>
      <p>Det räcker långt för att komma igång med OOP i PHP.</p>

      <h3>Reflektion över Sympony</h3>
      <p>Jag tycker strukturen var ganska omfattande. Det var mycket att ta in i början. Jag är van att bygga mina egna lösningar med OOP och MVC, så jag kände igen mig i upplägget. Däremot har jag aldrig jobbat med Symfony tidigare.</p>
      <p>Symfony verkar väldigt kraftfullt, men det känns också ganska tungt för mindre projekt. Med nästan 200 MB och över 22 000 filer tycker jag att det blir lite för mycket. Jag föredrar lättare lösningar, särskilt när jag bygger själv.</p>

      <h3>PHP The Right Way</h3>
      <p>Jag gillar att artikeln samlar bra tips och "best practices" på ett och samma ställe. Några saker jag fastnade extra för var:</p>
      <ul>
        <li>Dependency Injection - bra för att skriva lösare kopplad kod.</li>
        <li>PSR-standarder - hjälper till att skriva kod som andra lättare kan förstå.</li>
        <li>Säkerhet - påminnelser om att alltid validera och sanera användardata.</li>
      </ul>
      <p>Jag vill lära mig mer om Composer, då det känns som ett naturligt nästa steg.</p>

      <h3>Today I Learned</h3>
      <p>Det jag lärde mig mest av den här delen var hur ett ramverk som Symfony bygger upp ett projekt. Även om jag inte själv hade valt det till ett mindre projekt, så är det intressant att se hur det är uppbyggt. Jag tar med mig många idéer som jag kan använda i mina egna projekt.</p>
    </article>

    <article id="kmom02" class="report-section">
      <h2>Kmom02</h2>
      <h3>Förklaringar</h3>
      <ul>
        <li><b>Arv</b> gör att en klass kan ärva egenskaper och metoder från en annan klass med <code>extends</code>. Jag använder det för att låta <code>CardGraphic</code> ärva från <code>Card</code>.</li>
        <li><b>Komposition</b> innebär att en klass använder andra objekt som delar. Klassen <code>Deck</code> innehåller flera <code>CardGraphic</code>-objekt.</li>
        <li><b>Interface</b> definierar vilka metoder en klass måste ha, utan att ge implementation. Jag använde inte interface i uppgiften, men det hade kunnat användas för att till exempel definiera gemensam funktionalitet mellan olika typer av kort.</li>
        <li><b>Trait</b> används för att återanvända metoder i flera klasser. Jag använde inte trait här, men det hade kunnat användas för till exempel färglogik.</li>
      </ul>

      <h3>Min implementation</h3>
      <p>Tack vare tidigare övningar med tärningsklasser och hantering av session så var det ganska enkelt att göra om koden för att passa ett kortspel. Jag kunde återanvända väldigt mycket från dice-övningarna, vilket gjorde att mycket föll på plats direkt.</p>
      <p>Jag är relativt nöjd med strukturen och hur det gick att följa flödet i applikationen. Koden är ganska modulär och går enkelt att utöka. Självklart finns det några förbättringsområden, som till exempel en bättre felhantering, och det kunde vara bra att flytta ut vissa delar till interface eller traits om man vill göra applikationen ännu mer modulär. Men för uppgiftens syfte tycker jag att lösningen blev bra och tydlig.</p>

      <h3>Är Symfony verkligen så bra?</h3>
      <p>Symfony ger en relativt tydlig uppdelning mellan data, logik och vy, vilket kan vara en stor fördel i större projekt där många jobbar tillsammans eller där kodbasen växer snabbt. Det gör det såklart enklare att hålla isär ansvar, återanvända kod och följa något som MVC.</p>
      <p>Samtidigt är Symfony ganska tungt, både i form av mängden kod som krävs för att göra något relativt enkelt, och i själva ramverket. Det känns overkill för mindre projekt där man bara vill bygga något snabbt, och det känns inte riktigt som om arbetet verkligen vägs upp av nyttan.</p>
      <p>Jag tycker Symfony känns lite bloated. Det händer ofta att man får skriva mycket konfiguration och boilerplate-kod för att få igång något som hade varit betydligt enklare i ren PHP. Det kräver dessutom att man förstår en hel del om hur ramverket tänker, vilket kan skapa onödiga hinder i början. För mindre applikationer känns det som det tar mer resurser än det ger.</p>
      <p>Med det sagt uppskattar jag ändå den struktur Symfony tvingar fram. I större eller mer långsiktiga projekt kan jag ser eventuella fördelar, men i mindre uppgifter eller personliga projekt skulle jag hellre välja ett lättare alternativ.</p>

      <h3>Today I Learned</h3>
      <p>Jag försöker ha ett öppet mindset, men det är inte alltid enkelt. Symfony har ganska strikta regler för hur saker ska göras, och det gör att felsökning ibland tar betydligt längre tid än i enklare PHP-projekt. Det känns som att mycket tid går åt till att förstå ramverkets sätt att tänka, snarare än att faktiskt skriva funktionell kod.</p>
      <p>Med det sagt har jag i det här kursmomentet fått en mycket tydligare bild av hur MVC fungerar i praktiken. Det blev mer konkret och detaljerat än tidigare, särskilt i hur ansvaret delas upp mellan controller, modell och vy. Så även om det ibland känns trögt, har jag ändå lärt mig mycket av att arbeta med Symfony.</p>
    </article>

    <article id="kmom03" class="report-section">
      <h2>Kmom03</h2>
      <h3>Att modellera kortspelet med flödesdiagram och pseudokod</h3>
      <p>Att börja med ett flödesdiagram hjälpte mig mycket. Det gav en bra överblick och gjorde det enklare att veta var jag skulle börja. Pseudokod har jag använt förut i andra kurser, men jag tycker fortfarande att det kan vara svårt att få till på ett sätt som både hjälper utvecklingen och är lätt att förstå för någon annan. Jag känner inget stort behov av pseudokod och för mig räcker oftast ett flödesdiagram och en grov planering innan jag börjar koda.</p>

      <h3>Min implementation av uppgiften</h3>
      <p>Jag började med att rita ett flödesdiagram, sen skrev jag lite pseudokod, och därefter skissade jag på vilka klasser som skulle behövas. Efter det gick jag över till att börja koda.</p>
      <p>Jag tycker att det gick bra utifrån de förutsättningar jag hade. Något nytt jag lärde mig var att man kan spara objekt i PHP:s sessioner, vilket gjorde allt mycket smidigare. Självklart finns det alltid saker att förbättra. Kanske kan man strukturera koden ännu tydligare eller dela upp klasserna ännu mer, men jag är ändå nöjd med resultatet.</p>

      <h3>Känslan av att jobba med Symfony</h3>
      <p>Det känns som att jag upprepar mig från tidigare reflektioner, men känslan är densamma: Symfony är mäktigt, men för mig känns det fortfarande tungt och långsamt. Lite "overkill".</p>

      <h3>Today I Learned</h3>
      <p>Jag lärde mig att det finns många verktyg som kan hjälpa till att hålla en kodbas snygg och strukturerad. Men jag märkte också att olika lint-program kan ha olika regler, och om man inte är med från början kan det bli mycket jobb att rätta till koden i efterhand.</p>
    </article>

    <article id="kmom04" class="report-section">
      <h2>Kmom04</h2>
      <h3>Att skriva tester med PHPUnit</h3>
      <p>Jag hade inga större problem med att skriva tester med PHPUnit. Det påminner mycket om <code>unittest</code> i Python, som vi jobbat med tidigare, så det kändes ganska bekant. Jag har dock aldrig skrivit tester för PHP tidigare, mest för att jag faktiskt inte visste att det gick. Tidigare har jag alltid testat "live", alltså kört programmet och provat olika scenarion manuellt.</p>

      <h3>Kodtäckning</h3>
      <p>Jag försökte nå 100% kodtäckning, och började med de enklare klasserna. Det gick bra till en början, men jag hann inte riktigt klart med den största klassen, <code>TwentyOne.php</code>. Den har lite mer komplex logik och tog längre tid än väntat.</p>

      <h3>Hur testbar var koden?</h3>
      <p>Jag tycker generellt att koden var lätt att testa. Det kändes som att jag använde koden ungefär som den skulle användas i spelet. Däremot blev det svårare med <code>TwentyOne.php</code>, som har mer logik och beroenden att ta hänsyn till. Det är där man märker skillnaden på "vanlig kod" och kod som är skriven för att vara testbar.</p>

      <h3>Om jag skrev om något för att kunna testa</h3>
      <p>Jag behövde faktiskt inte skriva om något i min kod för att kunna testa den. Det var positivt att se att min struktur redan funkade för det mesta, även utan ändringar.</p>

      <h3>Testbar kod = snygg kod?</h3>
      <p>Ja, jag tycker faktiskt att testbar kod ofta går hand i hand med snygg kod. Om det är lätt att skriva tester, då är det ofta ett tecken på att koden är välstrukturerad, tydligt uppdelad och har låg koppling mellan olika delar. Då är det oftast mycket enklare att skriva tester för kod som någon annan har skrivit.</p>

      <h3>Today I Learned</h3>
      <p>Jag lärde mig att man faktiskt kan skriva tester i PHP, något jag inte ens visste fanns tidigare. Jag har alltid testat mig fram manuellt, men nu när jag vet att PHPUnit finns, så är det definitivt något jag kommer att lägga till i mitt verktygsbälte.</p>
    </article>

    <article id="kmom05" class="report-section">
      <h2>Kmom05</h2>
      <h3>Att jobba med Symfony och Doctrine</h3>
      <p>Det gick bra att jobba igenom övningen, även fast det var en del att sätta upp i början. Jag märkte också att det fanns väldigt mycket information i Doctrines egna dokumentation, vilket var lite överväldigande till en början, men med kursens egna sammanfattning så gick det mycket smidigt. Något som jag verkligen gillade var hur enkelt det var att generera klassfiler automatiskt. Det sparade mycket tid och gjorde det lätt att fokusera på själva funktionaliteten istället.</p>

      <h3>Applikationen och gränssnittet</h3>
      <p>Jag följde kravlistan och försökte tänka så logiskt som möjligt när jag byggde upp flödet. Jag la inte så extremt mycket fokus på designen, men ville ändå att det skulle kännas lite som ett riktigt bibliotek, lugnt och enkelt. Jag använde ett mjukt typsnitt och dämpade färger för att skapa en mysig känsla. Alla sidor hänger ihop på ett naturligt sätt.</p>

      <h3>Att jobba med ORM och CRUD</h3>
      <p>Med ORM och maker-bundlet gick det snabbt att komma igång med databasen. Jag valde att använda SQLite istället för MySQL eller MariaDB, mest för att spara tid. Det var skönt att kunna använda samma databas lokalt som på studentservern, vilket gjorde att jag slapp tänka på skillnader mellan miljöerna.</p>

      <h3>Min uppfattning om ORM</h3>
      <p>Min uppfattning om ORM hittills är att det verkar vara ett väldigt smidigt sätt att jobba mot en databas. När allt väl är installerat är det lätt att få en hum om hur det hela fungerar. Det påminner lite om andra lösningar jag provat, men här känns det mer integrerat i hela flödet och Symfony. Jämfört med att jobba direkt med PDO känns det som att man slipper mycket repetitioner, samt att det resulterar i att koden blir snyggare och lättare att läsa.</p>

      <h3>Today I Learned</h3>
      <p>Jag lärde mig hur smidigt det var att jobba med ORM och att det mesta sker automatiskt, vilket sparade mycket tid. Enkel och snygg kod!</p>
    </article>

    <article id="kmom06" class="report-section">
      <h2>Kmom06</h2>
      <h3>PHPMetrics</h3>
      <p>När jag först öppnade PHPMetrics så kände jag mig rätt överväldigad. Det var väldigt mycket siffror, grafer och värden att ta in på en gång, utan att riktigt veta vad som var viktigt att fokusera på. Men ju mer jag bekantade mig med verktyget, desto mer nytta såg jag. Jag gillade att jag kunde se komplexiteten i koden, vilka delar som var svåra att underhålla och vilka som faktiskt var välskrivna. Det blev som en slags ögonöppnare för hur olika delar av projektet mådde.</p>
      <p>Vissa visualiseringar var riktigt tydliga, till exempel datan för komplexitet per klass och buggrisk. De gjorde det lättare att se var man kanske borde lägga extra fokus. Jag tyckte också att det var bra att det fanns konkreta mätvärden som gick att jämföra mellan olika klasser.</p>

      <h3>Först intrycket av Scrutinizer</h3>
      <p>Att koppla ihop projektet med Scrutinizer gick oväntat smidigt. Jag hade förberett mig på krångel eftersom flera klasskamrater fått problem med första byggsteget, men för mig funkade det direkt. Första körningen gav mig ett kodbetyg på 9.96/10, vilket jag är väldigt nöjd med! Testtäckningen var däremot bara 16%, men det var väntat eftersom jag bara har lagt till tester för kortspelsdelen i projektet.</p>
      <p>Scrutinizers badges var ett snyggt sätt att visa statusen på täckning och kvalitet visuellt. Jag uppskattar också att Scrutinizer automatiskt triggas när man pushar ny kod, vilket gör att man snabbt ser effekten av sina ändringar.</p>

      <h3>Min syn på kodkvalitet</h3>
      <p>För mig handlar kodkvalitet mycket om struktur och läsbarhet. Jag lägger gärna lite extra tid på att koden ska vara snyggt formatterad med rätt indentering, luft mellan block och logisk ordning på saker. Personligen föredrar jag 4 mellanslag (eller tab) istället för 2 för att det gör det mer behagligt att läsa. Jag tycker det är viktigt med tydliga kommentarer och PHPDoc där det behövs, men inte överallt bara för sakens skull. Det ska finnas när det tillför något.</p>
      <p>I mina privata projekt lägger jag (ärligt talat) ibland lite för mycket tid på att koden ska se bra ut. Men det är med vilje då jag vill att både jag själv och andra ska kunna hoppa in i projektet igen efter ett halvår och ändå snabbt fatta vad som händer.</p>

      <h3>Today I Learned</h3>
      <p>Det jag verkligen tar med mig från detta moment är hur mycket värdefull information man kan få ut från verktyg som PHPMetrics och Scrutinizer. Det är inte bara siffror utan det är konkret hjälp för att förbättra koden. Och att Scrutinizer automatiskt analyserar koden vid varje push är guld värt. Jag kommer definitivt att använda detta i mina egna projekt framöver.</p>
    </article>
  </div>
</section>
{% endblock %}